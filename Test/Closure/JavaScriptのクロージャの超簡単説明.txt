JavaScriptのクロージャの超簡単説明

クロージャについて、ごくごく簡単にまとめました。
1から6に向かって進化していくイメージで。

1. 普通に関数実行

　　function hoge() {
　　　　alert("hoge");
　　};
　　
　　hoge();　// ごくごく普通ですね。


2. 関数って変数に代入できるんだ。それで実行できるんだ。

　　function hoge() {
　　　　alert("hoge");
　　};

　　var func = hoge;　// 関数名を変数に代入！
　　func();　　　　　 // そんでもって実行！


3. 関数の中に関数って書けるんだねー。

　　function outer() {
　　　　var cnt = 1;
　　　　function inner() {　// 関数の内側で関数を定義
　　　　　　cnt++;　　　　　// 外側の関数で宣言した変数にアクセスできるね。
　　　　　　alert(cnt);
　　　　}
　　　　inner();　// そして内側の関数の実行
　　};

　　outer();


4. 関数の中の関数を、外から実行してみよう。

　　function outer() {
　　　　var cnt = 1;
　　　　function inner() { 
　　　　　　cnt++;
　　　　　　alert(cnt);
　　　　}
　　　　var ret = inner;　// 内側の関数を変数で受けて...
　　　　return ret;　　　 // それを戻り値で返す
　　};

　　var inner2 = outer();　// inner2に内側関数を代入して
　　inner2();　　　　　　　// 実行


5. 関数の中の関数の書き方を省略する(無名関数の利用)

　　function outer() {
　　　　var cnt = 1;
　　　　return function () {
　　　　　　cnt++;
　　　　　　alert(cnt);
　　　　}
　　};

　　var inner = outer();
　　inner();


6. 引数とか戻り値とかを追加してみよう

　　function outer(init) {　// 引数を受け取って
　　　　var cnt = init;　　 // 初期値として設定できるようにしてみた

　　　　return function (delta) {　// 引数を受け取って
　　　　　　cnt += delta;　　　　　// 好きなだけ増やせるようにしてみた
　　　　　　alert(cnt);
　　　　　　return cnt;　　　　　　// 表示した値を返せるようにしてみた
　　　　}
　　};

　　var inner = outer(10);　　 // 初期値は10
　　var c = inner(2);　　　　　// 2足す
　　alert("return --> " + c);　// 戻り値を表示


7. 内側の関数が一個じゃ足りないし...

　　function outer(init) {
　　　　var cnt = init;

　　　　var obj = new Object();　　　 // オブジェクト使えばいい
　　　　obj.add = function (delta) {　// 足し算用関数(メソッド)
　　　　　　cnt += delta;
　　　　　　return cnt;
　　　　}
　　　　obj.show = function() {　　　 // 表示用関数(メソッド)
　　　　　　alert("show --> " + cnt);
　　　　}

　　　　return obj;
　　};

　　var inner = outer(10);
　　var c = inner.add(2);　 // 足し算と
　　inner.show();　　　　　 // 表示をバラバラに呼び出す
　　alert("return --> " + c);


以上です
